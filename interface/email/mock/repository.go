// Code generated by MockGen. DO NOT EDIT.
// Source: interface/email/repository.go

// Package mock_email is a generated GoMock package.
package mock_email

import (
	entity "pitest/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOutputEmailRepository is a mock of OutputEmailRepository interface.
type MockOutputEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutputEmailRepositoryMockRecorder
}

// MockOutputEmailRepositoryMockRecorder is the mock recorder for MockOutputEmailRepository.
type MockOutputEmailRepositoryMockRecorder struct {
	mock *MockOutputEmailRepository
}

// NewMockOutputEmailRepository creates a new mock instance.
func NewMockOutputEmailRepository(ctrl *gomock.Controller) *MockOutputEmailRepository {
	mock := &MockOutputEmailRepository{ctrl: ctrl}
	mock.recorder = &MockOutputEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputEmailRepository) EXPECT() *MockOutputEmailRepositoryMockRecorder {
	return m.recorder
}

// WriteOut mocks base method.
func (m *MockOutputEmailRepository) WriteOut(arg0 []*entity.OutputEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOut", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOut indicates an expected call of WriteOut.
func (mr *MockOutputEmailRepositoryMockRecorder) WriteOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOut", reflect.TypeOf((*MockOutputEmailRepository)(nil).WriteOut), arg0)
}

// MockErrorCustomerRepository is a mock of ErrorCustomerRepository interface.
type MockErrorCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockErrorCustomerRepositoryMockRecorder
}

// MockErrorCustomerRepositoryMockRecorder is the mock recorder for MockErrorCustomerRepository.
type MockErrorCustomerRepositoryMockRecorder struct {
	mock *MockErrorCustomerRepository
}

// NewMockErrorCustomerRepository creates a new mock instance.
func NewMockErrorCustomerRepository(ctrl *gomock.Controller) *MockErrorCustomerRepository {
	mock := &MockErrorCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockErrorCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorCustomerRepository) EXPECT() *MockErrorCustomerRepositoryMockRecorder {
	return m.recorder
}

// WriteOut mocks base method.
func (m *MockErrorCustomerRepository) WriteOut(arg0 []*entity.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOut", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOut indicates an expected call of WriteOut.
func (mr *MockErrorCustomerRepositoryMockRecorder) WriteOut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOut", reflect.TypeOf((*MockErrorCustomerRepository)(nil).WriteOut), arg0)
}
