// Code generated by MockGen. DO NOT EDIT.
// Source: interface/email/usecase.go

// Package mock_email is a generated GoMock package.
package mock_email

import (
	entity "pitest/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailUsecase is a mock of EmailUsecase interface.
type MockEmailUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEmailUsecaseMockRecorder
}

// MockEmailUsecaseMockRecorder is the mock recorder for MockEmailUsecase.
type MockEmailUsecaseMockRecorder struct {
	mock *MockEmailUsecase
}

// NewMockEmailUsecase creates a new mock instance.
func NewMockEmailUsecase(ctrl *gomock.Controller) *MockEmailUsecase {
	mock := &MockEmailUsecase{ctrl: ctrl}
	mock.recorder = &MockEmailUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailUsecase) EXPECT() *MockEmailUsecaseMockRecorder {
	return m.recorder
}

// Compose mocks base method.
func (m *MockEmailUsecase) Compose(template *entity.EmailTemplate, customers []*entity.Customer) ([]*entity.OutputEmail, []*entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compose", template, customers)
	ret0, _ := ret[0].([]*entity.OutputEmail)
	ret1, _ := ret[1].([]*entity.Customer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Compose indicates an expected call of Compose.
func (mr *MockEmailUsecaseMockRecorder) Compose(template, customers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compose", reflect.TypeOf((*MockEmailUsecase)(nil).Compose), template, customers)
}
